#!/bin/bash

set -e

script_name='deploy-quorum-ibft-worker'
install_root="${HOME}/install/quorum"
deploy_root="${HOME}/deploy/quorum-ibft"
prepare_root="${HOME}/prepare/quorum-ibft"


# Utility functions - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

fatal() {
    local msg="$1" ; shift

    exec >&2

    echo "${script_name}: ${msg}"
    echo
    echo "Usage: $0 prepare                                                (1)"
    echo "       $0 generate <nodefile> <keyfile>                          (2)"
    echo
    echo "Prepare the Quorum-IBFT running directory in (1) or use the Quorum"
    echo "toolchain to generate a network from a list of nodes <nodefile> and"
    echo "list of the accounts to add with an initial balance in the "
    echo "blockchain."

    exit 1
}

setup_environment() {
    if [ ! -e "${install_root}" ] ; then
	fatal "cannot find quorum install at '${install_root}'"
    fi

    export PATH="${install_root}/build/bin:${PATH}"
    export PATH="${install_root}/istanbul-tools/build/bin:${PATH}"

    if ! command -v 'geth' > '/dev/null' 2> '/dev/null' ; then
	fatal "cannot find geth executable in '${install_root}'"
    fi

    if ! command -v 'istanbul' > '/dev/null' 2> '/dev/null' ; then
	fatal "cannot find istanbul executable in '${install_root}'"
    fi
}


# Prepare action  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

prepare() {
    if [ $# -gt 0 ] ; then
	fatal "unexpected operand '$1'"
    fi

    if [ -e "${deploy_root}" ] ; then
	rm -rf "${deploy_root}"
    fi

	mkdir -p "${deploy_root}"

    if [ ! -d "${prepare_root}" ] ; then
	mkdir -p "${prepare_root}"
    fi
}


# Generate action - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

prepare_netroot() {
    local netroot="$1" ; shift
    local num i

    num=$(cat "${nodefile}" | wc -l)

    mkdir -p "${netroot}"
    for i in $(seq 0 $(( num - 1 ))) ; do
	mkdir "${netroot}/n${i}"
    done
}

set_nodes_ip_port() {
    local staticnodes="$1" ; shift
    local nodefile="$1" ; shift
    local tmp index lines node ip port rpcport

    tmp="${staticnodes}.new"
    index=1

    while read -r line ; do
	if ! echo "${line}" | grep -Pq '^\s*"enode' ; then
	    echo "${line}"
	    continue
	fi

	node="$(tail -n +${index} "${nodefile}" | head -n1)"
	ip="$(echo "${node}" | cut -d':' -f1)"
	port="$(echo "${node}" | cut -d':' -f2)"
	echo "    ${line}" | sed -r 's/@.*\?/@'"${ip}:${port}"'?/'

	index=$(( index + 1 ))
    done < "${staticnodes}" > "${tmp}"
    echo "]" >> "${tmp}"

    mv "${tmp}" "${staticnodes}"
}

initialize_accounts() {
    local genesis="$1" ; shift
    local keyfile="$1" ; shift
    local line account address private balance

    balance="0x118427b3b4a05bc8a8a4de845986800000000000"

    (
	IFS=''
	while read -r line ; do
	    echo "${line}"
	    if echo "${line}" | grep -Pq '^\s*"alloc"\s*:\s*{\s*$' ; then
		while read account ; do
		    address="$(echo "${account}" | cut -d':' -f1)"
		    private="$(echo "${private}" | cut -d':' -f2)"
		    printf "        \"%s\": {\n" "${address}"
		    printf "            \"balance\": \"%s\"\n" "${balance}"
		    printf "        },\n"
		done < "${keyfile}"
	    fi
	done

	printf "}"
    ) < "${genesis}" > "${genesis}.new"

    mv "${genesis}.new" "${genesis}"
}

initialize_nodes() {
    local netroot="$1" ; shift
    local nodefile="$1" ; shift
    local i num node port rpcport

    num=$(cat "${nodefile}" | wc -l)

    for i in $(seq 0 $(( num - 1 ))) ; do
	node="$(tail -n +$(( i + 1 )) "${nodefile}" | head -n1)"
	port="$(echo "${node}" | cut -d':' -f2)"
	rpcport="$(echo "${node}" | cut -d':' -f3)"

	cp "${netroot}/${i}/nodekey" "${netroot}/n${i}/nodekey"
	chmod 644 "${netroot}/n${i}/nodekey"

	rm -rf "${netroot}/${i}"

	echo "${port}" > "${netroot}/n${i}/port"
	echo "${rpcport}" > "${netroot}/n${i}/rpcport"
    done
}

generate() {
    if [ $# -lt 1 ] ; then
	fatal "missing nodefile operand"
    elif [ $# -lt 2 ] ; then
	fatal "missing keyfile operand"
    elif [ $# -gt 2 ] ; then
	fatal "unexpected operand '$3'"
    fi

    local nodefile="$1" ; shift
    local keyfile="$1" ; shift
    local netroot="${deploy_root}/network"
    local numnode

    setup_environment

    if [ -e "${netroot}" ] ; then
	rm -rf "${netroot}"
    fi

    numnode=$(cat "${nodefile}" | wc -l)
    local prepared_path="${prepare_root}/network-${numnode}"

    if [ ! -e "${prepared_path}" ] ; then
        prepare_netroot "${prepared_path}"

        (
        cd "${prepared_path}"

        if ! istanbul setup --num ${numnode} --nodes --quorum --save --verbose \
            > 'istanbul.log' 2>&1 ; then
            cat 'istanbul.log' >&2
            rm 'istanbul.log'
            return 1
        fi

        rm 'istanbul.log'
        )

        initialize_accounts "${prepared_path}/genesis.json" "${keyfile}"
    fi
    cp -R "${prepared_path}" "${netroot}"

    set_nodes_ip_port "${netroot}/static-nodes.json" "${nodefile}"

    initialize_nodes "${netroot}" "${nodefile}"

    tar -C "${deploy_root}" -czf "${netroot}.tar.gz" 'network'

    rm -rf "${netroot}"
}

finalize() {
    local genesis="${deploy_root}/genesis.json"
    local staticnodes="${deploy_root}/static-nodes.json"
    local dir

    setup_environment

    if [ -d "${deploy_root}/network" ] ; then
	rm -rf "${deploy_root}/network"
    fi

    for dir in "${deploy_root}/n"* ; do
	if [ ! -d "${dir}" ] ; then
	    continue
	fi

	cp "${staticnodes}" "${dir}/static-nodes.json"

	if ! geth --datadir "${dir}" init "${genesis}" \
	     > "${dir}/geth.log" 2>&1 ; then
	    cat "${dir}/geth.log" >&2
	    rm "${dir}/geth.log"
	    return 1
	fi

	rm "${dir}/geth.log"
    done

    rm "${genesis}"
    rm "${staticnodes}"
}


# Main script - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ $# -lt 1 ] ; then
    fatal "missing action operand"
fi

action="$1" ; shift

case "${action}" in
    'prepare')
	prepare "$@"
	;;
    'generate')
	generate "$@"
	;;
    'finalize')
	finalize "$@"
	;;
    *)
	fatal "unknown action: '${action}'"
	;;
esac
