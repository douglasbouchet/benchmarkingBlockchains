#!/usr/bin/env python3
#
# See: https://docs.soliditylang.org/en/v0.8.11/abi-spec.html

import base64
import re
import struct
import sys

for line in sys.stdin:
    proto = None
    delta = None

    # Try to match a primarySale call.
    #
    # match string of the form "primarySale(digit, digit)"
    m = re.search("^primarySale\((\d+(,\s+\d+))\)$", line)
    if m:
        proto = "primarySale(int256,int256)"
        delta0 = int(m.group(1).split(",")[0])
        delta1 = int(m.group(1).split(",")[1])

    # No match -> this is not a valid call.
    #
    if not proto:
        exit(1)

    # Print the function prototype.
    # Diablo automatically translates it to the function unique id.
    #
    print(proto)

    # Arguments are passed to diablo as a base64 encoded string.

    # Arguments should be encoded in big endian.
    # We want a 256 signed integer:
    #   28 bytes of padding
    #    4 bytes of unsigned integer with the actual value
    #
    # print (base64.b64encode(struct.pack('>28sI', b'\x00' * 28, delta)).decode('ascii'), flush = True) # original

    # trying with given values from the input, working with primarySale(int256,int256)
    # we parse each input into a 256 signed integer, and then we encode it in base64
    first = base64.b64encode(struct.pack(">28sI", b"\x00" * 28, delta0)).decode("ascii")
    second = base64.b64encode(struct.pack(">28sI", b"\x00" * 28, delta1)).decode(
        "ascii"
    )
    # then we remove the "=" from first, and add one "=" at the end of second.
    print(first[:-1] + second + "=", flush=True)
