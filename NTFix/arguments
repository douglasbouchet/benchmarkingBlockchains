#!/usr/bin/env python3
#
# See: https://docs.soliditylang.org/en/v0.8.11/abi-spec.html

import base64
import re
import struct
import sys

for line in sys.stdin:
    proto = None
    delta = None

    # Try to match a push call.
    #
    m = re.search('^push\((\d+)\)$', line)
    if m:
        proto = 'push(int256)'
        delta = int (m.group(1))

    # Try to match a pull call.
    #
    m = re.search('^pull\((\d+)\)$', line)
    if m:
        proto = 'pull(int256)'
        delta = int (m.group(1))

    # No match -> this is not a valid call.
    #
    if not proto:
        exit (1)
    
    # Print the function prototype.
    # Diablo automatically translates it to the function unique id.
    #
    print (proto)

    # Arguments are passed to diablo as a base64 encoded string.

    # Arguments should be encoded in big endian.
    # We want a 256 signed integer:
    #   28 bytes of padding
    #    4 bytes of unsigned integer with the actual value
    #
    print (base64.b64encode(struct.pack('>28sI', b'\x00' * 28, delta)).decode(
        'ascii'), flush = True)
