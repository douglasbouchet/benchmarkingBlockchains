#!/usr/bin/env python3
#
# See: https://docs.soliditylang.org/en/v0.8.11/abi-spec.html

import base64
import re
import struct
import sys

for line in sys.stdin:
    proto = None
    delta = None

    # Try to match a pull call.
    #
    #m = re.search('^primarySale\((\d+)\)$', line)

    # match smthg of the form "primarySale(digit,digit)"
    m = re.search('^primarySale\((\d+(?:,\d+))\)$', line)
    m = re.search('^primarySale\((\d+(,\s+\d+))\)$', line)
    #primarySale(1111)
    if m:
        #proto = 'primarySale(int256)' original 
        proto = 'primarySale(int256, int256)' # TODO do we need a space after the comma?
        #delta = int (m.group(1)) original
        delta0 = int (m.group(1).split(",")[0])
        delta1 = int (m.group(1).split(",")[1])


    # No match -> this is not a valid call.
    #
    if not proto:
        exit (1)
    
    # Print the function prototype.
    # Diablo automatically translates it to the function unique id.
    #
    print (proto)

    # Arguments are passed to diablo as a base64 encoded string.

    # Arguments should be encoded in big endian.
    # We want a 256 signed integer:
    #   28 bytes of padding
    #    4 bytes of unsigned integer with the actual value
    #
    #print (base64.b64encode(struct.pack('>28sI', b'\x00' * 28, delta)).decode(
    #    'ascii'), flush = True) original 
    first = base64.b64encode(struct.pack('>28sI', b'\x00' * 28, delta0)).decode('ascii')
    second = base64.b64encode(struct.pack('>28sI', b'\x00' * 28, delta1)).decode('ascii')
    print(first[:-1] + second, flush=True)
    #print (base64.b64encode(struct.pack('>28sI', b'\x00' * 28, delta0)).decode(
    #    'ascii'), base64.b64encode(struct.pack('>28sI', b'\x00' * 28, delta1)).decode(
    #    'ascii'), flush = True)
    #print (base64.b64encode(struct.pack('>28sI', b'\x00' * 28, delta0), struct.pack('>28sI', b'\x00' * 28, delta1)).decode(
    #    'ascii'), flush = True)
