#!/usr/bin/env python3
#
# See: https://docs.soliditylang.org/en/v0.8.11/abi-spec.html

import base64
import re
import struct
import sys


arguments = {}  # second -> [x,y,color]

# with open("arguments.csv", "r") as f:
with open("/home/user/workloads/solidity-contracts/pixelWar/arguments.csv", "r") as f:
    # store each line of arguments.csv inside json
    for line in f:
        splitted = line.split(",")
        assert len(splitted) == 4
        arguments[int(splitted[0])] = splitted[1:]

counter = 0  # this record the second, in order to get the txs arguments inside a file

for line in sys.stdin:
    proto = None

    # Try to match a setPixel call.
    # It has no arguments as they are read from arguments, so we just check the function name i.e setPixel()
    m = re.search("^setPixel\(()\)$", line)

    if m:
        # proto = 'primarySale(int256)'# original
        # proto = "setPixel(int256,int256,bytes7)"
        proto = "setPixel(uint256,uint256)"
        # proto = "setPixel(uint256,uint256)" simpler version working
        # values = arguments[counter]
        # x = values[0]
        # y = values[1]
        # color = values[2]

    # No match -> this is not a valid call.
    #
    if not proto:
        exit(1)

    # Print the function prototype.
    # Diablo automatically translates it to the function unique id.
    #
    print(proto)

    # Arguments are passed to diablo as a base64 encoded string.

    # trying with given values from the input, working with setPixel(int256,int256,string)
    # first = base64.b64encode(struct.pack(">28sI", b"\x00" * 28, x)).decode("ascii")
    # second = base64.b64encode(struct.pack(">28sI", b"\x00" * 28, y)).decode("ascii")
    # print(first[:-1] + second + "=", flush=True)
    # -----------------------------------------
    # first = base64.b64encode(struct.pack(">28sI", b"\x00" * 28, 1)).decode("ascii")
    # second = base64.b64encode(struct.pack(">28sI", b"\x00" * 28, 2)).decode("ascii")
    # third = base64.b64encode(struct.pack(">28sI", b"\x00" * 28, 3)).decode("ascii")
    # third = base64.b64encode(
    #    b"6162636161616100000000000000000000000000000000000000000000000000"
    # ).decode("ascii")
    # print(first[:-1] + second + "=", flush=True)
    # print(first[:-1] + second[:-1] + third + "=", flush=True)  # not working
    print(
        "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE==",
        flush=True,
    )
    # -----------------------------------------
    # each color is 7 bytes long, so we need to pad it with 0s
    # third = base64.b64encode(struct.pack(">28sI", b"\x00" * 28, color)).decode("ascii")
    # hardcoded value, if work, just need to encode chars as hex value
    # "abcaaaa"
    # third = base64.b64encode(
    #    b"6162636161616100000000000000000000000000000000000000000000000000"
    # ).decode("ascii")
    # print(first[:-1] + second[:-1] + third + "=", flush=True)

    # counter += 1
